---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
---
description: |
  Enforce Google's Developer Style Guide principles for technical documentation.
  These rules guide the AI to create clear, consistent, and user-friendly documentation.
globs:
  - "*.md"
  - "*.mdx"
  - "*.txt"
---

# Google Developer Style Guide for Technical Documentation

## Document Structure
- Always use sentence case for all Markdown headings (e.g., '# This is a heading' not '# This Is A Heading').
- Begin each main section with a brief one or two sentence overview that summarizes the section's content.
- Organize content into logical sections with clear and concise headings and subheadings.
- Structure the documentation in a hierarchical manner, using heading levels (# for main titles, ## for sections, ### for subsections).

## Lists and Formatting
- Use Markdown numbered lists (1., 2., etc.) for sequential steps or ordered procedures.
- Use Markdown unordered lists (-, *, etc.) for collections of related items that don't have a specific order.
- Format code-related text using Markdown code blocks with the appropriate language identifier for syntax highlighting:

  ```python
  def example_function():
      return "Hello, world!"
  ```
- Format UI elements such as button labels and menu items using bold Markdown syntax (**UI Element**).
- Use italic text (*text*) sparingly, primarily for emphasis, terms, or book titles.
- Present pairs of related data (like terms and definitions) using description lists or bold terms followed by their explanations.
- Use unambiguous date formatting, preferably YYYY-MM-DD.

## Language and Tone
- Always address the reader using the second person pronoun "you" instead of "we" or "us".
- Prefer active voice in sentences. For example, instead of "The file was saved by the system," write "The system saved the file."
- Maintain a friendly, conversational, and helpful tone, similar to explaining a concept to a colleague.
- Use standard American English spelling and punctuation consistently.
- Avoid highly technical jargon without providing clear explanations or definitions.
- Be mindful of using idioms or culturally specific references that might not be universally understood.
- Avoid unnecessary repetition of adjectives and adverbs.
- Write in a clear, concise, and factual manner, avoiding overly casual or promotional language.

## Links and References
- When creating hyperlinks using Markdown, ensure the link text clearly describes the target page (e.g., [Learn more about the API](mdc:url)).
- Prioritize linking to official documentation, well-established technical websites, or academic resources.
- For fundamental concepts crucial to understanding the current topic, provide a brief explanation within the documentation rather than immediately linking externally.
- Reserve external links for more detailed or supplementary information.

## Code Examples
- Always enclose code examples in Markdown code blocks using triple backticks (```) and specify the programming language.
- Precede every code block with a brief paragraph explaining its context and purpose.
- Follow the code block with an explanation of its key parts and expected output.
- Provide substantial, real-world code examples that demonstrate complete or significant functionality rather than isolated snippets.
- If the code example pertains to a specific file or directory, mention its location relative to the project root.

## Images and Diagrams
- When including images or diagrams, use Markdown image syntax and provide descriptive alt text: ![Alt text describing the image](mdc:image.png)
- Prefer PNG format for diagrams and illustrations, and WebP format for other images where appropriate.
- Ensure all images serve a purpose and enhance understanding of the content.

## Warnings, Notes, and Important Information
- Format warnings using Markdown blockquotes with a clear prefix:
  > :::warning 
  
    This action cannont be undone.

    :::

- Format notes using Markdown blockquotes:
  > :::warning 
  
    Additional configuration may be required for custom installations.

    ::: 
- Keep warning, note, and important information messages brief and to the point, focusing on essential information.

## Step-by-Step Instructions
- Present step-by-step instructions using Markdown numbered lists.
- Begin each step with a clear action verb (e.g., "Click", "Open", "Enter").
- Ensure each step represents a single, actionable task.
- Provide sufficient detail for the target audience to understand and execute each action without requiring additional assumptions.